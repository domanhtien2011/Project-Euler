# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#     By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.



# arr = []
# (1...4000000).each do |number|
#   if number == 1
#     arr << number << number
#     next
#   end
#   arr << number
# end
#
# arr.each.with_index(3) do |_, index|
#   if arr[index] != arr[index - 1] + arr[index -2 ]
#     arr.delete(arr[index])
#   end
# end
#
# puts arr.count
# arr.each_with_index do |value, index|
#
# end

# Did I come up with this fibonacci algorithm? Hell no, why reinvent the wheel! But do I understand this algorithm? Hell yes
def fibonacci(n)
  a = 1
  b = 1

  # 1.upto(n) do
  # i = 1
  # while(i <= n)
  # for i in 1..n do
  n.times do
    temp = a
    a    = b
    b    = temp + b
  end
  a
end

result  = 0
numbers = []
i       = 0
while result < 4000000
  result = fibonacci(i)
  numbers << result
  i += 1
end

sum = numbers.select{|number| number % 2 == 0}.inject(0){|sum, number| sum + number}
puts sum

